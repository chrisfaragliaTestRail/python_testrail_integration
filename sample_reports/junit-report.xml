<?xml version="1.0" encoding="utf-8"?>
<testsuites>
    <testsuite name="pytest" errors="0" failures="1" skipped="0" tests="3" time="21.247"
               timestamp="2023-05-07T01:49:57.472081" hostname="LAPTOP-09USROG2">
        <testcase classname="tests.test_footer.TestsFooter" name="test_social_links" file="tests\test_footer.py"
                  line="6" time="6.229"/>
        <testcase classname="tests.test_homepage.TestsHomepage" name="test_header_links" file="tests\test_homepage.py"
                  line="6" time="3.683">
            <properties>
                <property name="testrail_result_comment" value="1. Check Platform link"/>
                <property name="testrail_result_comment" value="2. Check Enterprise link"/>
                <property name="testrail_result_comment" value="3. Check Pricing link"/>
            </properties>
        </testcase>
        <testcase classname="tests.test_homepage.TestsHomepage" name="test_action_links" file="tests\test_homepage.py"
                  line="20" time="6.857">
            <properties>
                <property name="testrail_result_comment" value="1. Check Demo link"/>
                <property name="testrail_result_comment" value="2. Check Trial link"/>
                <property name="testrail_attachment"
                          value="reports\16a20c01-a2aa-4f30-8724-25a76c11e241_screenshot.png"/>
                <property name="testrail_attachment"
                          value="reports\16a20c01-a2aa-4f30-8724-25a76c11e241_browser_logs.json"/>
            </properties>
            <failure
                    message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[@href='/get_trial_invalid_link/']&quot;}&#10;  (Session info: chrome=112.0.5615.139)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;GetHandleVerifier [0x00DADCE3+50899]&#10;&#09;(No symbol) [0x00D3E111]&#10;&#09;(No symbol) [0x00C45588]&#10;&#09;(No symbol) [0x00C708F9]&#10;&#09;(No symbol) [0x00C70AFB]&#10;&#09;(No symbol) [0x00C9F902]&#10;&#09;(No symbol) [0x00C8B944]&#10;&#09;(No symbol) [0x00C9E01C]&#10;&#09;(No symbol) [0x00C8B6F6]&#10;&#09;(No symbol) [0x00C67708]&#10;&#09;(No symbol) [0x00C6886D]&#10;&#09;GetHandleVerifier [0x01013EAE+2566302]&#10;&#09;GetHandleVerifier [0x010492B1+2784417]&#10;&#09;GetHandleVerifier [0x0104327C+2759788]&#10;&#09;GetHandleVerifier [0x00E45740+672048]&#10;&#09;(No symbol) [0x00D48872]&#10;&#09;(No symbol) [0x00D441C8]&#10;&#09;(No symbol) [0x00D442AB]&#10;&#09;(No symbol) [0x00D371B7]&#10;&#09;BaseThreadInitThunk [0x76AE0099+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77AB7B6E+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x77AB7B3E+238]">
                browser_driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver
                (session="ccc88061276a3cd0023c4730ae31587b")&gt;
                record_property = &lt;function record_property.&lt;locals&gt;.append_property at 0x000002346B303520&gt;

                @staticmethod
                def test_action_links(browser_driver: WebDriver, record_property):
                """
                Checks actions links for trial and demo
                """
                record_property("testrail_result_comment", "1. Check Demo link")
                assert browser_driver.find_element(By.XPATH,
                "(//*[contains(@href,'webinar/register')])[1]").is_displayed()

                record_property("testrail_result_comment", "2. Check Trial link")
                &gt; assert browser_driver.find_element(By.XPATH,
                "//*[@href='/get_trial_invalid_link/']").is_displayed()

                tests\test_homepage.py:30:
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                .venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:856: in find_element
                return self.execute(Command.FIND_ELEMENT, {
                .venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:429: in execute
                self.error_handler.check_response(response)
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

                self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002346B3404F0&gt;
                response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element:
                Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath
                [0x77AB7B6E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77AB7B3E+238]\\n"}}'}

                def check_response(self, response: Dict[str, Any]) -&gt; None:
                """
                Checks that a JSON response from the WebDriver does not have an error.

                :Args:
                - response - The JSON response from the WebDriver server as a dictionary
                object.

                :Raises: If the response contains an error message.
                """
                status = response.get('status', None)
                if not status or status == ErrorCode.SUCCESS:
                return
                value = None
                message = response.get("message", "")
                screen: str = response.get("screen", "")
                stacktrace = None
                if isinstance(status, int):
                value_json = response.get('value', None)
                if value_json and isinstance(value_json, str):
                import json
                try:
                value = json.loads(value_json)
                if len(value.keys()) == 1:
                value = value['value']
                status = value.get('error', None)
                if not status:
                status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                message = value.get("value") or value.get("message")
                if not isinstance(message, str):
                value = message
                message = message.get('message')
                else:
                message = value.get('message', None)
                except ValueError:
                pass

                exception_class: Type[WebDriverException]
                if status in ErrorCode.NO_SUCH_ELEMENT:
                exception_class = NoSuchElementException
                elif status in ErrorCode.NO_SUCH_FRAME:
                exception_class = NoSuchFrameException
                elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
                exception_class = NoSuchShadowRootException
                elif status in ErrorCode.NO_SUCH_WINDOW:
                exception_class = NoSuchWindowException
                elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
                exception_class = StaleElementReferenceException
                elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
                exception_class = ElementNotVisibleException
                elif status in ErrorCode.INVALID_ELEMENT_STATE:
                exception_class = InvalidElementStateException
                elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
                exception_class = InvalidSelectorException
                elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
                exception_class = ElementNotSelectableException
                elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
                exception_class = ElementNotInteractableException
                elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
                exception_class = InvalidCookieDomainException
                elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
                exception_class = UnableToSetCookieException
                elif status in ErrorCode.TIMEOUT:
                exception_class = TimeoutException
                elif status in ErrorCode.SCRIPT_TIMEOUT:
                exception_class = TimeoutException
                elif status in ErrorCode.UNKNOWN_ERROR:
                exception_class = WebDriverException
                elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
                exception_class = UnexpectedAlertPresentException
                elif status in ErrorCode.NO_ALERT_OPEN:
                exception_class = NoAlertPresentException
                elif status in ErrorCode.IME_NOT_AVAILABLE:
                exception_class = ImeNotAvailableException
                elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
                exception_class = ImeActivationFailedException
                elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
                exception_class = MoveTargetOutOfBoundsException
                elif status in ErrorCode.JAVASCRIPT_ERROR:
                exception_class = JavascriptException
                elif status in ErrorCode.SESSION_NOT_CREATED:
                exception_class = SessionNotCreatedException
                elif status in ErrorCode.INVALID_ARGUMENT:
                exception_class = InvalidArgumentException
                elif status in ErrorCode.NO_SUCH_COOKIE:
                exception_class = NoSuchCookieException
                elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
                exception_class = ScreenshotException
                elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
                exception_class = ElementClickInterceptedException
                elif status in ErrorCode.INSECURE_CERTIFICATE:
                exception_class = InsecureCertificateException
                elif status in ErrorCode.INVALID_COORDINATES:
                exception_class = InvalidCoordinatesException
                elif status in ErrorCode.INVALID_SESSION_ID:
                exception_class = InvalidSessionIdException
                elif status in ErrorCode.UNKNOWN_METHOD:
                exception_class = UnknownMethodException
                else:
                exception_class = WebDriverException
                if not value:
                value = response['value']
                if isinstance(value, str):
                raise exception_class(value)
                if message == "" and 'message' in value:
                message = value['message']

                screen = None # type: ignore[assignment]
                if 'screen' in value:
                screen = value['screen']

                stacktrace = None
                st_value = value.get('stackTrace') or value.get('stacktrace')
                if st_value:
                if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
                else:
                stacktrace = []
                try:
                for frame in st_value:
                line = frame.get("lineNumber", "")
                file = frame.get("fileName", "&lt;anonymous&gt;")
                if line:
                file = f"{file}:{line}"
                meth = frame.get('methodName', '&lt;anonymous&gt;')
                if 'className' in frame:
                meth = "{}.{}".format(frame['className'], meth)
                msg = " at %s (%s)"
                msg = msg % (meth, file)
                stacktrace.append(msg)
                except TypeError:
                pass
                if exception_class == UnexpectedAlertPresentException:
                alert_text = None
                if 'data' in value:
                alert_text = value['data'].get('text')
                elif 'alert' in value:
                alert_text = value['alert'].get('text')
                raise exception_class(message, screen, stacktrace, alert_text) # type: ignore[call-arg] # mypy is not
                smart enough here
                &gt; raise exception_class(message, screen, stacktrace)
                E selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element:
                {"method":"xpath","selector":"//*[@href='/get_trial_invalid_link/']"}
                E (Session info: chrome=112.0.5615.139)
                E Stacktrace:
                E Backtrace:
                E GetHandleVerifier [0x00DADCE3+50899]
                E (No symbol) [0x00D3E111]
                E (No symbol) [0x00C45588]
                E (No symbol) [0x00C708F9]
                E (No symbol) [0x00C70AFB]
                E (No symbol) [0x00C9F902]
                E (No symbol) [0x00C8B944]
                E (No symbol) [0x00C9E01C]
                E (No symbol) [0x00C8B6F6]
                E (No symbol) [0x00C67708]
                E (No symbol) [0x00C6886D]
                E GetHandleVerifier [0x01013EAE+2566302]
                E GetHandleVerifier [0x010492B1+2784417]
                E GetHandleVerifier [0x0104327C+2759788]
                E GetHandleVerifier [0x00E45740+672048]
                E (No symbol) [0x00D48872]
                E (No symbol) [0x00D441C8]
                E (No symbol) [0x00D442AB]
                E (No symbol) [0x00D371B7]
                E BaseThreadInitThunk [0x76AE0099+25]
                E RtlGetAppContainerNamedObjectPath [0x77AB7B6E+286]
                E RtlGetAppContainerNamedObjectPath [0x77AB7B3E+238]

                .venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:243: NoSuchElementException
            </failure>
        </testcase>
    </testsuite>
</testsuites>